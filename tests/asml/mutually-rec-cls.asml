let _v1 v2  =
 let v0 = mem(%self + 4) in
 let v15 = new 12  in
 let addr_v3 = _v3 in
 let v19 = mem(v15 + 0) <- addr_v3 in
 let v18 = mem(v15 + 4) <- v0 in
 let v17 = mem(v15 + 8) <- %self in
 let v8 = 0 in
 if v2 <= v8 then let v11 = 1 in
 add v0 v11 else let v10 = 1 in
 let v9 = sub v2 v10 in
 call_closure v15 v9 
 
let _v3 v4  =
 let v0 = mem(%self + 4) in
 let v1 = mem(%self + 8) in
 let v5 = 0 in
 if v4 <= v5 then v0 else let v7 = 1 in
 let v6 = sub v4 v7 in
 call_closure v1 v6 
 
let _ =
 let v0 = 0 in
 let v16 = new 8  in
 let addr_v1 = _v1 in
 let v21 = mem(v16 + 0) <- addr_v1 in
 let v20 = mem(v16 + 4) <- v0 in
 let v13 = 4 in
 let v12 = call_closure v16 v13  in
 call _min_caml_print_int v12 
